Bug-Reports

I was able to identify numerous bugs during testing, most of which were
signalled by an incorrect change in deck, hand, or discard count for either the
current or non-current player. Below are the three bugs discovered by checking
the print statements generated by my card and random tests. The two other bugs I
noticed (not documented below) were found in cardAdventurer() and concern lack
of Treasure cards identified during draw and incorrect updating of the player’s
discard pile. These were only noticed during code review after testing while in
the process of debugging Deirdre’s code.

==============================
Bug 1 of 3
Title:  dominion.c smithyEffect() failure, adds incorrect number of cards to
current player’s hand

Class: Serious Bug

Date: March 3, 2018
Reported By: Kendra Ellis
Email: ellisken@oregonstate.edu

Product: dominion.c     Version: morand-assignment-2
Is it reproducible: Yes

Description
===========
Dominion rules specify that playing Smithy should result in a net increase in
current player’s hand count of  2 cards. This is the result of drawing 3 (+3)
and discarding 1. Playing Smithy resulted in a net increase of zero cards to the
current player’s (player 1) hand. Code inspection revealed an issue in line 649
of dominion.c “for (i = 0; i > 3; i++)”, which leads to zero executions of the
for loop used to call drawCard().

Steps to Produce/Reproduce
--------------------------
1. Initialize gameState
2. Create test copy of gameState
2. Using default initialized values, call smithyEffect() for player 1 with
handPos == 0 on test copy
3. Assert originalState.handCount[player1]  + 2 == testState.handCount[player1]

Expected Results
----------------
I expected player 1’s hand count to increase by exactly 2 cards.

Actual Results
--------------
Player 1’s hand count did not increase by any cards (i.e., it increased by
zero).

Workarounds
-----------
There is no workaround, as incorrect hand counts will significantly affect the
rest of game play.




==============================
Bug 2 of 3
Title:  dominion.c smithyEffect() failure, draws incorrect number of cards from
player’s deck (cardtest1.c, randomtestadventurer.c)

Class: Serious Bug

Date: March 3, 2018
Reported By: Kendra Ellis
Email: ellisken@oregonstate.edu

Product: dominion.c     Version: morand-assignment-2
Is it reproducible: Yes

Description
===========
Dominion rules specify that playing Smithy should result in a total decrease in
the current player’s deck of 3 cards, since Smithy entitles the player to +3.
Playing Smithy did not result in any decrease in
gameState.deckCount[currentPlayer] when current player is player 1 with a hand
position of 0 and game-initial deck, hand, and discard piles. The cause is due
to the same error mentioned in Bug 1, i.e., drawCard() is never called since the
indexing variable in the for loop is set to zero, and the conditional is “i >
3.”

Steps to Produce/Reproduce
--------------------------
1. Initialize gameState
2. Create test copy of gameState
3. Using default initialized values, call smithyEffect() for player 1 with
handPos == 0 on test copy
4. Assert originalState.deckCount[player1]  - 3 == testState.handCount[player1]

Expected Results
----------------
I expected player 1’s deck count to decrease by exactly 3 cards.

Actual Results
--------------
Player 1’s deck count decreased by exactly zero.

Workarounds
-----------
There is no workaround, as incorrect deck counts will significantly affect the
rest of game play.

Other Information
-----------------


==============================
Bug 3 of 3
Title:  Dominion.c council_room in cardEffect() incorrectly updates current
player’s hand count (randomtestcard2.c)

Class: Serious Bug

Date: March 3, 2018
Reported By: Kendra Ellis
Email: ellisken@oregonstate.edu

Product: dominion.c     Version: morand-assignment-2
Is it reproducible: Yes

Description
===========
I ran randomly generated inputs for council_roomEffect() and checked for
failure. On the first iteration, the current player’s hand count is 5 and
handPos is 2. Every other player’s hand count was 5 before playing Council Room.
Afterwards, none of the non-current players’ hand counts have increased at all
(but should have each increased by 3). The cause of this failure is likely due
to the condition for calling drawCard() for non-current players in line 699 is
set as “if ( i == currentPlayer )” when it should instead by “if ( i !=
currentPlayer).”




Steps to Produce/Reproduce
--------------------------
1. Initialize gameState for 4 players
2. Create test copy of gameState
3. Set currentPlayer to player 3 with an initial hand count of 5, hand position
of 2, game state buy count of 1, played pile count of 0. 
4. Play Council Room
4. For each non-current player, assert testState.handCount[player] ==
originalState.handCount[player] + 3

Expected Results
----------------
I expected each non-current player’s hand count to increase from 5 to 8 cards.

Actual Results
--------------
None of the non-current players’ hand counts increased at all, which led to the
guess that  drawCard() is never called for non-current players since
council_roomEffect() does not directly handle a player’s deck, hand, or discard
counts.

Workarounds
-----------
There is no workaround, as incorrect hand counts will significantly affect the
rest of game play.
